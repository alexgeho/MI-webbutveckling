// auth.js

// üîπ –ë–∞–∑–æ–≤—ã–π URL backend-–∞
const API_URL = "http://localhost:5003";

// üîπ –í—Å–µ –ø—É—Ç–∏ authRouter-–∞
const AUTH_ENDPOINTS = {
  registration: `${API_URL}/auth/registration`,
  login: `${API_URL}/auth/login`,
  logout: `${API_URL}/auth/logout`,
  refresh: `${API_URL}/auth/refresh-token`,
  me: `${API_URL}/auth/me`,
  registrationConfirmation: `${API_URL}/auth/registration-confirmation`,
  registrationResend: `${API_URL}/auth/registration-email-resending`,
  passwordRecovery: `${API_URL}/auth/password-recovery`,
  newPassword: `${API_URL}/auth/new-password`,
};

// üîπ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function showAlert(message, type = "danger") {
  const alertDiv = document.createElement("div");
  alertDiv.className = `alert alert-${type} mt-3`;
  alertDiv.textContent = message;

  const container = document.querySelector(".card");
  container.appendChild(alertDiv);

  setTimeout(() => alertDiv.remove(), 3000);
}

// üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async function handleRegisterForm() {
  const form = document.getElementById("register-form");
  if (!form) return;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const username = document.getElementById("username").value.trim();
    const email = document.getElementById("email").value.trim();
    const password = document.getElementById("password").value.trim();

    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      return showAlert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email", "warning");
    }
    if (password.length < 6) {
      return showAlert("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤", "warning");
    }

    try {
      const res = await fetch(AUTH_ENDPOINTS.registration, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ login: username, email, password }),
      });

      if (!res.ok) {
        const error = await res.json().catch(() => ({}));
        throw new Error(error.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      }

      showAlert("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", "success");
      form.reset();
    } catch (err) {
      showAlert(err.message);
    }
  });
}

// üîπ –õ–æ–≥–∏–Ω
async function handleLoginForm() {
  const form = document.getElementById("login-form");
  if (!form) return;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const loginOrEmail = document.getElementById("loginOrEmail").value.trim();
    const password = document.getElementById("password").value.trim();

    if (!loginOrEmail || !password) {
      return showAlert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", "warning");
    }

    try {
      const res = await fetch(AUTH_ENDPOINTS.login, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ loginOrEmail, password }),
      });

      if (!res.ok) {
        const error = await res.json().catch(() => ({}));
        throw new Error(error.message || "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
      }

      const data = await res.json();

      showAlert("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!", "success");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º accessToken, –µ—Å–ª–∏ backend –µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
      if (data.accessToken) {
        localStorage.setItem("token", data.accessToken);
        console.log("JWT —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", data.accessToken);
      } else {
        console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
      }

      // –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ /auth/me –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      try {
        const meRes = await fetch(AUTH_ENDPOINTS.me, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        console.log("ME response:", await meRes.json());
      } catch (meErr) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /me:", meErr);
      }

    } catch (err) {
      showAlert(err.message);
    }
  });
}

// üîπ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
handleRegisterForm();
handleLoginForm();
